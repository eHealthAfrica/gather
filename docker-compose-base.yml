version: "2.1"

services:

  # ---------------------------------
  # Database container
  # ---------------------------------

  postgres-base:
    image: postgres:9.6-alpine
    environment:
      PGUSER: postgres
    healthcheck:
      test: pg_isready
      interval: 5s
      timeout: 3s
      retries: 30

  # ---------------------------------
  # NGINX container
  # ---------------------------------

  nginx-base:
    image: nginx:alpine
    volumes:
      # local setup
      - ./local-setup/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./local-setup/nginx/sites-enabled:/etc/nginx/sites-enabled

      # static folders per container
      - ./.persistent_data/static:/static
      # aether favicon
      - ./local-setup/aether.ico:/static/aether.ico

      # media folders per container
      - ./.persistent_data/media:/media
    ports:
      - "80:80"
      - "8443:8443"
    healthcheck:
      test: nginx -t
      interval: 5s
      timeout: 3s
      retries: 30


  # ---------------------------------
  # Aether Kernel container
  # ---------------------------------

  kernel-base:
    image: ehealthafrica/aether-kernel:${AETHER_VERSION:-latest}
    environment:
      CSRF_COOKIE_DOMAIN: .aether.local
      DJANGO_SECRET_KEY: ${KERNEL_DJANGO_SECRET_KEY}

      # Uncomment these lines to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server
      # HOSTNAME: kernel.aether.local

      ADMIN_USERNAME: ${KERNEL_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${KERNEL_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${KERNEL_ADMIN_TOKEN}

      KERNEL_READONLY_DB_USERNAME: ${KERNEL_READONLY_DB_USERNAME}
      KERNEL_READONLY_DB_PASSWORD: ${KERNEL_READONLY_DB_PASSWORD}

      DB_NAME: aether-kernel
      PGHOST: db # This matches the DB service name
      PGPASSWORD: ${KERNEL_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      WEB_SERVER_PORT: 8000
    volumes:
      - ./.persistent_data/media/kernel:/media
      - ./.persistent_data/static/kernel:/var/www/static
    ports:
      - "8000:8000"
    command: start
    healthcheck:
      test: /code/entrypoint.sh health
      interval: 5s
      timeout: 3s
      retries: 30


  # ---------------------------------
  # Aether ODK container
  # ---------------------------------

  odk-base:
    image: ehealthafrica/aether-odk:${AETHER_VERSION:-latest}
    environment:
      CSRF_COOKIE_DOMAIN: .aether.local
      DJANGO_SECRET_KEY: ${ODK_DJANGO_SECRET_KEY}

      # Uncomment these lines to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server
      # HOSTNAME: odk.aether.local

      ADMIN_USERNAME: ${ODK_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ODK_ADMIN_PASSWORD}
      ADMIN_TOKEN: ${ODK_ADMIN_TOKEN}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: aether-odk
      PGHOST: db # This matches the DB service name
      PGPASSWORD: ${ODK_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # behind ngnix
      WEB_SERVER_PORT: 8002
      # standalone (without nginx) (ODK Collect only accepts 443 and 8443 ports)
      # WEB_SERVER_PORT: 8443
    volumes:
      - ./.persistent_data/media/odk:/media
      - ./.persistent_data/static/odk:/var/www/static
    ports:
      # behind ngnix
      - "8002:8002"
      # standalone (without nginx)
      # - "8443:8443"
    command: start
    healthcheck:
      test: /code/entrypoint.sh health
      interval: 5s
      timeout: 3s
      retries: 30


  # ---------------------------------
  # Aether UI container
  # ---------------------------------

  ui-base:
    image: ehealthafrica/aether-ui:${AETHER_VERSION:-latest}
    environment:
      CSRF_COOKIE_DOMAIN: .aether.local
      DJANGO_SECRET_KEY: ${UI_DJANGO_SECRET_KEY}

      # Uncomment these lines to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server
      # HOSTNAME: ui.aether.local

      ADMIN_USERNAME: ${UI_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${UI_ADMIN_PASSWORD}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000

      DB_NAME: aether-ui
      PGHOST: db # This matches the DB service name
      PGPASSWORD: ${UI_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      WEB_SERVER_PORT: 8004
    volumes:
      - ./.persistent_data/static/ui:/var/www/static
    ports:
      - "8004:8004"
    command: start
    healthcheck:
      test: /code/entrypoint.sh health
      interval: 5s
      timeout: 3s
      retries: 30


  # ---------------------------------
  # Gather container
  # ---------------------------------

  gather-base:
    image: gather
    build:
      context: .
      dockerfile: app/Dockerfile
    stdin_open: true
    tty: true
    environment:
      CSRF_COOKIE_DOMAIN: gather.local
      DEBUG: "true" # Comment it out with `start` command
      DJANGO_SECRET_KEY: ${GATHER_DJANGO_SECRET_KEY}

      # Uncomment these lines to enable single sign on if you use CAS
      # CAS_SERVER_URL: https://your.cas.server
      # HOSTNAME: gather.local

      ADMIN_USERNAME: ${GATHER_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${GATHER_ADMIN_PASSWORD}

      AETHER_KERNEL_TOKEN: ${KERNEL_ADMIN_TOKEN}
      AETHER_KERNEL_URL: http://kernel:8000
      AETHER_KERNEL_URL_TEST: http://kernel-test:9000
      AETHER_KERNEL_URL_ASSETS: http://kernel.aether.local

      AETHER_MODULES: "kernel,odk,"

      AETHER_ODK_TOKEN: ${ODK_ADMIN_TOKEN}
      AETHER_ODK_URL: http://odk:8002
      AETHER_ODK_URL_TEST: http://odk-test:9002
      AETHER_ODK_URL_ASSETS: http://odk.aether.local

      DB_NAME: gather
      PGHOST: db # This matches the DB service name
      PGPASSWORD: ${GATHER_DB_PASSWORD}
      PGPORT: 5432
      PGUSER: postgres

      # assets variables
      CSV_HEADER_RULES: remove-prefix;payload.,remove-prefix;None.,replace;.;:;
      CSV_HEADER_RULES_SEP: ;
      CSV_MAX_ROWS_SIZE: 0

      WEB_SERVER_PORT: 8005

      # Use this value with `start_dev` command and "webpack" otherwise comment it out
      STATIC_ROOT: /code/gather/assets/bundles
    volumes:
      - ./app:/code
      # Use this volume with `start` command and comment out `STATIC_ROOT`
      - ./.persistent_data/static/gather:/var/www/static
    ports:
      - "8005:8005"
    command: start_dev
    healthcheck:
      test: /code/entrypoint.sh health
      interval: 5s
      timeout: 3s
      retries: 30

  # ---------------------------------
  # Gather Assets container
  # ---------------------------------

  gather-assets-base:
    build: ./app/gather/assets
    stdin_open: true
    tty: true
    volumes:
      #################################################
      #                    WARNING                    #
      # do not include the root folder as volume or   #
      # `node_modules` folder will not be available   #
      #################################################

      # include all folders and root files manually :'(
      - ./app/gather/assets/apps:/code/apps
      - ./app/gather/assets/bundles:/code/bundles
      - ./app/gather/assets/conf:/code/conf
      - ./app/gather/assets/css:/code/css
      - ./app/gather/assets/tests:/code/tests
      - ./app/gather/assets/package.json:/code/package.json
    ports:
      - "3005:3005"
    command: start_dev
    healthcheck:
      test: curl -s http://localhost:3005
      interval: 5s
      timeout: 3s
      retries: 30
